/*
Energy Price Calculator
Copyright (C) 2022  Jeremias Bosch

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <SSD1306Wire.h>
#include <ESP8266WiFi.h>
#include <time.h>
#include <sys/time.h>  
#include <coredecls.h>  
#include <list>

#include "credentials.h"
#include "consumptionProfiles.h"
#include "tibber.h"
#include "calculator.h"

// Created by http://oleddisplay.squix.ch/ Consider a donation
// In case of problems make sure that you are using the font file with the correct version!
const uint8_t Roboto_Condensed_Light_9[] PROGMEM = {
  0x07, // Width: 7
  0x0C, // Height: 12
  0x20, // First Char: 32
  0xE0, // Numbers of Chars: 224

  // Jump Table:
  0xFF, 0xFF, 0x00, 0x02,  // 32:65535
  0x00, 0x00, 0x02, 0x02,  // 33:0
  0x00, 0x02, 0x03, 0x03,  // 34:2
  0x00, 0x05, 0x09, 0x05,  // 35:5
  0x00, 0x0E, 0x07, 0x04,  // 36:14
  0x00, 0x15, 0x0A, 0x06,  // 37:21
  0x00, 0x1F, 0x0A, 0x05,  // 38:31
  0x00, 0x29, 0x01, 0x02,  // 39:41
  0x00, 0x2A, 0x06, 0x03,  // 40:42
  0x00, 0x30, 0x04, 0x03,  // 41:48
  0x00, 0x34, 0x07, 0x04,  // 42:52
  0x00, 0x3B, 0x07, 0x04,  // 43:59
  0x00, 0x42, 0x02, 0x02,  // 44:66
  0x00, 0x44, 0x03, 0x02,  // 45:68
  0x00, 0x47, 0x02, 0x02,  // 46:71
  0x00, 0x49, 0x05, 0x03,  // 47:73
  0x00, 0x4E, 0x07, 0x04,  // 48:78
  0x00, 0x55, 0x06, 0x04,  // 49:85
  0x00, 0x5B, 0x08, 0x04,  // 50:91
  0x00, 0x63, 0x07, 0x04,  // 51:99
  0x00, 0x6A, 0x07, 0x04,  // 52:106
  0x00, 0x71, 0x07, 0x04,  // 53:113
  0x00, 0x78, 0x07, 0x04,  // 54:120
  0x00, 0x7F, 0x07, 0x04,  // 55:127
  0x00, 0x86, 0x07, 0x04,  // 56:134
  0x00, 0x8D, 0x07, 0x04,  // 57:141
  0x00, 0x94, 0x02, 0x02,  // 58:148
  0x00, 0x96, 0x02, 0x02,  // 59:150
  0x00, 0x98, 0x05, 0x04,  // 60:152
  0x00, 0x9D, 0x07, 0x04,  // 61:157
  0x00, 0xA4, 0x07, 0x04,  // 62:164
  0x00, 0xAB, 0x05, 0x04,  // 63:171
  0x00, 0xB0, 0x0D, 0x07,  // 64:176
  0x00, 0xBD, 0x0A, 0x05,  // 65:189
  0x00, 0xC7, 0x08, 0x05,  // 66:199
  0x00, 0xCF, 0x09, 0x05,  // 67:207
  0x00, 0xD8, 0x08, 0x05,  // 68:216
  0x00, 0xE0, 0x08, 0x04,  // 69:224
  0x00, 0xE8, 0x07, 0x04,  // 70:232
  0x00, 0xEF, 0x08, 0x05,  // 71:239
  0x00, 0xF7, 0x0A, 0x06,  // 72:247
  0x01, 0x01, 0x02, 0x02,  // 73:257
  0x01, 0x03, 0x06, 0x04,  // 74:259
  0x01, 0x09, 0x0A, 0x05,  // 75:265
  0x01, 0x13, 0x08, 0x04,  // 76:275
  0x01, 0x1B, 0x0C, 0x07,  // 77:283
  0x01, 0x27, 0x0A, 0x06,  // 78:295
  0x01, 0x31, 0x09, 0x05,  // 79:305
  0x01, 0x3A, 0x09, 0x05,  // 80:314
  0x01, 0x43, 0x0A, 0x05,  // 81:323
  0x01, 0x4D, 0x0A, 0x05,  // 82:333
  0x01, 0x57, 0x08, 0x05,  // 83:343
  0x01, 0x5F, 0x07, 0x05,  // 84:351
  0x01, 0x66, 0x08, 0x05,  // 85:358
  0x01, 0x6E, 0x09, 0x05,  // 86:366
  0x01, 0x77, 0x0D, 0x07,  // 87:375
  0x01, 0x84, 0x0A, 0x05,  // 88:388
  0x01, 0x8E, 0x09, 0x05,  // 89:398
  0x01, 0x97, 0x08, 0x05,  // 90:407
  0x01, 0x9F, 0x04, 0x02,  // 91:415
  0x01, 0xA3, 0x06, 0x03,  // 92:419
  0x01, 0xA9, 0x02, 0x02,  // 93:425
  0x01, 0xAB, 0x05, 0x03,  // 94:427
  0x01, 0xB0, 0x06, 0x03,  // 95:432
  0x01, 0xB6, 0x03, 0x03,  // 96:438
  0x01, 0xB9, 0x08, 0x04,  // 97:441
  0x01, 0xC1, 0x07, 0x04,  // 98:449
  0x01, 0xC8, 0x07, 0x04,  // 99:456
  0x01, 0xCF, 0x08, 0x04,  // 100:463
  0x01, 0xD7, 0x08, 0x04,  // 101:471
  0x01, 0xDF, 0x05, 0x03,  // 102:479
  0x01, 0xE4, 0x08, 0x04,  // 103:484
  0x01, 0xEC, 0x08, 0x04,  // 104:492
  0x01, 0xF4, 0x02, 0x02,  // 105:500
  0x01, 0xF6, 0x02, 0x02,  // 106:502
  0x01, 0xF8, 0x08, 0x04,  // 107:504
  0x02, 0x00, 0x02, 0x02,  // 108:512
  0x02, 0x02, 0x0C, 0x07,  // 109:514
  0x02, 0x0E, 0x08, 0x04,  // 110:526
  0x02, 0x16, 0x07, 0x04,  // 111:534
  0x02, 0x1D, 0x07, 0x04,  // 112:541
  0x02, 0x24, 0x08, 0x04,  // 113:548
  0x02, 0x2C, 0x05, 0x03,  // 114:556
  0x02, 0x31, 0x08, 0x04,  // 115:561
  0x02, 0x39, 0x04, 0x03,  // 116:569
  0x02, 0x3D, 0x08, 0x04,  // 117:573
  0x02, 0x45, 0x07, 0x04,  // 118:581
  0x02, 0x4C, 0x0B, 0x06,  // 119:588
  0x02, 0x57, 0x08, 0x04,  // 120:599
  0x02, 0x5F, 0x07, 0x04,  // 121:607
  0x02, 0x66, 0x08, 0x04,  // 122:614
  0x02, 0x6E, 0x06, 0x03,  // 123:622
  0x02, 0x74, 0x02, 0x02,  // 124:628
  0x02, 0x76, 0x05, 0x03,  // 125:630
  0x02, 0x7B, 0x09, 0x05,  // 126:635
  0x02, 0x84, 0x06, 0x04,  // 127:644
  0x02, 0x8A, 0x06, 0x04,  // 128:650
  0x02, 0x90, 0x06, 0x04,  // 129:656
  0x02, 0x96, 0x06, 0x04,  // 130:662
  0x02, 0x9C, 0x06, 0x04,  // 131:668
  0x02, 0xA2, 0x06, 0x04,  // 132:674
  0x02, 0xA8, 0x06, 0x04,  // 133:680
  0x02, 0xAE, 0x06, 0x04,  // 134:686
  0x02, 0xB4, 0x06, 0x04,  // 135:692
  0x02, 0xBA, 0x06, 0x04,  // 136:698
  0x02, 0xC0, 0x06, 0x04,  // 137:704
  0x02, 0xC6, 0x06, 0x04,  // 138:710
  0x02, 0xCC, 0x06, 0x04,  // 139:716
  0x02, 0xD2, 0x06, 0x04,  // 140:722
  0x02, 0xD8, 0x06, 0x04,  // 141:728
  0x02, 0xDE, 0x06, 0x04,  // 142:734
  0x02, 0xE4, 0x06, 0x04,  // 143:740
  0x02, 0xEA, 0x06, 0x04,  // 144:746
  0x02, 0xF0, 0x06, 0x04,  // 145:752
  0x02, 0xF6, 0x06, 0x04,  // 146:758
  0x02, 0xFC, 0x06, 0x04,  // 147:764
  0x03, 0x02, 0x06, 0x04,  // 148:770
  0x03, 0x08, 0x06, 0x04,  // 149:776
  0x03, 0x0E, 0x06, 0x04,  // 150:782
  0x03, 0x14, 0x06, 0x04,  // 151:788
  0x03, 0x1A, 0x06, 0x04,  // 152:794
  0x03, 0x20, 0x06, 0x04,  // 153:800
  0x03, 0x26, 0x06, 0x04,  // 154:806
  0x03, 0x2C, 0x06, 0x04,  // 155:812
  0x03, 0x32, 0x06, 0x04,  // 156:818
  0x03, 0x38, 0x06, 0x04,  // 157:824
  0x03, 0x3E, 0x06, 0x04,  // 158:830
  0x03, 0x44, 0x06, 0x04,  // 159:836
  0xFF, 0xFF, 0x00, 0x02,  // 160:65535
  0x03, 0x4A, 0x02, 0x02,  // 161:842
  0x03, 0x4C, 0x07, 0x04,  // 162:844
  0x03, 0x53, 0x08, 0x05,  // 163:851
  0x03, 0x5B, 0x0C, 0x07,  // 164:859
  0x03, 0x67, 0x07, 0x04,  // 165:871
  0x03, 0x6E, 0x02, 0x02,  // 166:878
  0x03, 0x70, 0x08, 0x05,  // 167:880
  0x03, 0x78, 0x05, 0x04,  // 168:888
  0x03, 0x7D, 0x0D, 0x07,  // 169:893
  0x03, 0x8A, 0x05, 0x04,  // 170:906
  0x03, 0x8F, 0x05, 0x04,  // 171:911
  0x03, 0x94, 0x07, 0x04,  // 172:916
  0x03, 0x9B, 0x03, 0x02,  // 173:923
  0x03, 0x9E, 0x0D, 0x07,  // 174:926
  0x03, 0xAB, 0x05, 0x03,  // 175:939
  0x03, 0xB0, 0x05, 0x03,  // 176:944
  0x03, 0xB5, 0x08, 0x04,  // 177:949
  0x03, 0xBD, 0x05, 0x03,  // 178:957
  0x03, 0xC2, 0x05, 0x03,  // 179:962
  0x03, 0xC7, 0x03, 0x03,  // 180:967
  0x03, 0xCA, 0x08, 0x04,  // 181:970
  0x03, 0xD2, 0x06, 0x04,  // 182:978
  0x03, 0xD8, 0x01, 0x02,  // 183:984
  0x03, 0xD9, 0x04, 0x02,  // 184:985
  0x03, 0xDD, 0x03, 0x03,  // 185:989
  0x03, 0xE0, 0x05, 0x04,  // 186:992
  0x03, 0xE5, 0x05, 0x04,  // 187:997
  0x03, 0xEA, 0x0B, 0x06,  // 188:1002
  0x03, 0xF5, 0x0C, 0x06,  // 189:1013
  0x04, 0x01, 0x0B, 0x06,  // 190:1025
  0x04, 0x0C, 0x06, 0x04,  // 191:1036
  0x04, 0x12, 0x0A, 0x05,  // 192:1042
  0x04, 0x1C, 0x0A, 0x05,  // 193:1052
  0x04, 0x26, 0x0A, 0x05,  // 194:1062
  0x04, 0x30, 0x0A, 0x05,  // 195:1072
  0x04, 0x3A, 0x0A, 0x05,  // 196:1082
  0x04, 0x44, 0x0A, 0x05,  // 197:1092
  0x04, 0x4E, 0x0E, 0x07,  // 198:1102
  0x04, 0x5C, 0x09, 0x05,  // 199:1116
  0x04, 0x65, 0x08, 0x04,  // 200:1125
  0x04, 0x6D, 0x08, 0x04,  // 201:1133
  0x04, 0x75, 0x08, 0x04,  // 202:1141
  0x04, 0x7D, 0x08, 0x04,  // 203:1149
  0x04, 0x85, 0x03, 0x02,  // 204:1157
  0x04, 0x88, 0x04, 0x02,  // 205:1160
  0x04, 0x8C, 0x03, 0x02,  // 206:1164
  0x04, 0x8F, 0x03, 0x02,  // 207:1167
  0x04, 0x92, 0x09, 0x05,  // 208:1170
  0x04, 0x9B, 0x0A, 0x06,  // 209:1179
  0x04, 0xA5, 0x09, 0x05,  // 210:1189
  0x04, 0xAE, 0x09, 0x05,  // 211:1198
  0x04, 0xB7, 0x09, 0x05,  // 212:1207
  0x04, 0xC0, 0x09, 0x05,  // 213:1216
  0x04, 0xC9, 0x09, 0x05,  // 214:1225
  0x04, 0xD2, 0x08, 0x04,  // 215:1234
  0x04, 0xDA, 0x09, 0x05,  // 216:1242
  0x04, 0xE3, 0x08, 0x05,  // 217:1251
  0x04, 0xEB, 0x08, 0x05,  // 218:1259
  0x04, 0xF3, 0x08, 0x05,  // 219:1267
  0x04, 0xFB, 0x08, 0x05,  // 220:1275
  0x05, 0x03, 0x09, 0x05,  // 221:1283
  0x05, 0x0C, 0x07, 0x05,  // 222:1292
  0x05, 0x13, 0x08, 0x05,  // 223:1299
  0x05, 0x1B, 0x08, 0x04,  // 224:1307
  0x05, 0x23, 0x08, 0x04,  // 225:1315
  0x05, 0x2B, 0x08, 0x04,  // 226:1323
  0x05, 0x33, 0x08, 0x04,  // 227:1331
  0x05, 0x3B, 0x08, 0x04,  // 228:1339
  0x05, 0x43, 0x08, 0x04,  // 229:1347
  0x05, 0x4B, 0x0C, 0x07,  // 230:1355
  0x05, 0x57, 0x07, 0x04,  // 231:1367
  0x05, 0x5E, 0x08, 0x04,  // 232:1374
  0x05, 0x66, 0x08, 0x04,  // 233:1382
  0x05, 0x6E, 0x08, 0x04,  // 234:1390
  0x05, 0x76, 0x08, 0x04,  // 235:1398
  0x05, 0x7E, 0x02, 0x02,  // 236:1406
  0x05, 0x80, 0x04, 0x02,  // 237:1408
  0x05, 0x84, 0x03, 0x02,  // 238:1412
  0x05, 0x87, 0x03, 0x02,  // 239:1415
  0x05, 0x8A, 0x08, 0x05,  // 240:1418
  0x05, 0x92, 0x08, 0x04,  // 241:1426
  0x05, 0x9A, 0x07, 0x04,  // 242:1434
  0x05, 0xA1, 0x07, 0x04,  // 243:1441
  0x05, 0xA8, 0x07, 0x04,  // 244:1448
  0x05, 0xAF, 0x07, 0x04,  // 245:1455
  0x05, 0xB6, 0x07, 0x04,  // 246:1462
  0x05, 0xBD, 0x07, 0x04,  // 247:1469
  0x05, 0xC4, 0x07, 0x04,  // 248:1476
  0x05, 0xCB, 0x08, 0x04,  // 249:1483
  0x05, 0xD3, 0x08, 0x04,  // 250:1491
  0x05, 0xDB, 0x08, 0x04,  // 251:1499
  0x05, 0xE3, 0x08, 0x04,  // 252:1507
  0x05, 0xEB, 0x07, 0x04,  // 253:1515
  0x05, 0xF2, 0x07, 0x04,  // 254:1522
  0x05, 0xF9, 0x07, 0x04,  // 255:1529

  // Font Data:
  0x7C,0x01,  // 33
  0x00,0x00,0x0C, // 34
  0x40,0x00,0xFC,0x01,0xF0,0x01,0x5C,0x00,0x10, // 35
  0x98,0x00,0x24,0x03,0x24,0x01,0xD8, // 36
  0x00,0x00,0x9C,0x00,0x7C,0x00,0xD8,0x01,0xC0,0x01,  // 37
  0x00,0x00,0xFC,0x01,0x5C,0x01,0xC0,0x01,0x00,0x01,  // 38
  0x0C, // 39
  0x00,0x00,0xFC,0x07,0x04,0x04,  // 40
  0x04,0x04,0xF8,0x03,  // 41
  0x18,0x00,0x0C,0x00,0x18,0x00,0x08, // 42
  0x40,0x00,0xF0,0x01,0x40,0x00,0x40, // 43
  0x00,0x03,  // 44
  0x40,0x00,0x40, // 45
  0x00,0x01,  // 46
  0x80,0x03,0x78,0x00,0x04, // 47
  0xF8,0x00,0x04,0x01,0x04,0x01,0xF8, // 48
  0x00,0x00,0x08,0x00,0xFC,0x01,  // 49
  0x88,0x01,0x44,0x01,0x34,0x01,0x08,0x01,  // 50
  0x88,0x00,0x24,0x01,0x34,0x01,0xC8, // 51
  0xC0,0x00,0xB0,0x00,0xFC,0x01,0x80, // 52
  0x00,0x00,0xBC,0x01,0x14,0x01,0xE4, // 53
  0xF8,0x00,0x14,0x01,0x14,0x01,0xE0, // 54
  0x04,0x00,0x84,0x01,0x74,0x00,0x0C, // 55
  0xD8,0x00,0x24,0x01,0x34,0x01,0xC8, // 56
  0x38,0x00,0x44,0x01,0xCC,0x01,0x70, // 57
  0x10,0x01,  // 58
  0x10,0x03,  // 59
  0x40,0x00,0x60,0x00,0x90, // 60
  0x00,0x00,0xA0,0x00,0xA0,0x00,0xA0, // 61
  0x00,0x00,0x90,0x00,0x60,0x00,0x40, // 62
  0x00,0x00,0x4C,0x01,0x3C, // 63
  0xE0,0x01,0x10,0x02,0xC8,0x05,0x28,0x05,0xE8,0x05,0xB0,0x01,0x40, // 64
  0x00,0x01,0xF8,0x00,0x9C,0x00,0xE0,0x00,0x00,0x01,  // 65
  0x00,0x00,0xFC,0x01,0x24,0x01,0xFC,0x01,  // 66
  0x00,0x00,0xFC,0x01,0x04,0x01,0x8C,0x01,0x90, // 67
  0x00,0x00,0xFC,0x01,0x04,0x01,0xFC,0x01,  // 68
  0x00,0x00,0xFC,0x01,0x24,0x01,0x24,0x01,  // 69
  0x00,0x00,0xFC,0x01,0x24,0x00,0x24, // 70
  0xF8,0x00,0x04,0x01,0x04,0x01,0xCC,0x01,  // 71
  0x00,0x00,0xFC,0x01,0x20,0x00,0x20,0x00,0xFC,0x01,  // 72
  0xFC,0x01,  // 73
  0x80,0x00,0x00,0x01,0xFC,0x01,  // 74
  0x00,0x00,0xFC,0x01,0x70,0x00,0x8C,0x01,0x04,0x01,  // 75
  0x00,0x00,0xFC,0x01,0x00,0x01,0x00,0x01,  // 76
  0x00,0x00,0xFC,0x01,0xE0,0x00,0xC0,0x01,0x28,0x00,0xFC,0x01,  // 77
  0x00,0x00,0xFC,0x01,0x30,0x00,0xC0,0x00,0xFC,0x01,  // 78
  0xF8,0x00,0x04,0x01,0x04,0x01,0x8C,0x01,0x70, // 79
  0x00,0x00,0xFC,0x01,0x44,0x00,0x6C,0x00,0x10, // 80
  0xF8,0x00,0x04,0x01,0x04,0x01,0x8C,0x03,0x70,0x02,  // 81
  0x00,0x00,0xFC,0x01,0x44,0x00,0xFC,0x01,0x00,0x01,  // 82
  0x00,0x00,0x9C,0x01,0x24,0x01,0xCC,0x01,  // 83
  0x04,0x00,0x04,0x00,0xFC,0x01,0x04, // 84
  0x00,0x00,0xFC,0x01,0x00,0x01,0xFC,0x01,  // 85
  0x1C,0x00,0xE0,0x00,0xC0,0x01,0x38,0x00,0x04, // 86
  0x3C,0x00,0xC0,0x01,0x78,0x00,0x3C,0x00,0xC0,0x01,0xF8,0x00,0x04, // 87
  0x04,0x01,0xD8,0x00,0x70,0x00,0x8C,0x01,0x00,0x01,  // 88
  0x0C,0x00,0x10,0x00,0xF0,0x01,0x0C,0x00,0x04, // 89
  0x84,0x01,0x44,0x01,0x34,0x01,0x0C,0x01,  // 90
  0x00,0x00,0xFC,0x03,  // 91
  0x1C,0x00,0xE0,0x00,0x00,0x03,  // 92
  0xFC,0x03,  // 93
  0x18,0x00,0x0C,0x00,0x10, // 94
  0x00,0x02,0x00,0x02,0x00,0x02,  // 95
  0x02,0x00,0x04, // 96
  0xA0,0x00,0x50,0x01,0xF0,0x01,0x00,0x01,  // 97
  0xFC,0x01,0x10,0x01,0x10,0x01,0xE0, // 98
  0xE0,0x00,0x10,0x01,0x10,0x01,0xA0, // 99
  0xE0,0x00,0x10,0x01,0x10,0x01,0xFC,0x01,  // 100
  0xE0,0x00,0x50,0x01,0x50,0x01,0x60,0x01,  // 101
  0x10,0x00,0xFC,0x01,0x14, // 102
  0xE0,0x02,0x10,0x05,0x10,0x05,0xF0,0x03,  // 103
  0xFC,0x01,0x10,0x00,0x30,0x00,0xC0,0x01,  // 104
  0xF4,0x01,  // 105
  0xF4,0x07,  // 106
  0x00,0x00,0xFC,0x01,0x90,0x01,0x10,0x01,  // 107
  0xFC,0x01,  // 108
  0x00,0x00,0xF0,0x01,0x10,0x00,0xE0,0x01,0x10,0x00,0xF0,0x01,  // 109
  0xF0,0x01,0x10,0x00,0x30,0x00,0xC0,0x01,  // 110
  0xE0,0x00,0x10,0x01,0x10,0x01,0xE0, // 111
  0xF0,0x07,0x10,0x01,0x10,0x01,0xE0, // 112
  0xE0,0x00,0x10,0x01,0x10,0x01,0xF0,0x07,  // 113
  0x00,0x00,0xF0,0x01,0x10, // 114
  0x20,0x01,0x50,0x01,0xD0,0x01,0x00,0x01,  // 115
  0x10,0x00,0xF8,0x01,  // 116
  0xF0,0x00,0x00,0x01,0x00,0x01,0xF0,0x01,  // 117
  0x30,0x00,0xC0,0x01,0xE0,0x00,0x10, // 118
  0x70,0x00,0x80,0x01,0x70,0x00,0x60,0x01,0xF0,0x00,0x10, // 119
  0x10,0x01,0xE0,0x00,0xB0,0x01,0x10,0x01,  // 120
  0x30,0x00,0xC0,0x07,0xE0,0x00,0x10, // 121
  0x90,0x01,0x50,0x01,0x30,0x01,0x00,0x01,  // 122
  0x40,0x00,0xBC,0x07,0x04,0x04,  // 123
  0xFC,0x03,  // 124
  0x04,0x04,0xB8,0x03,0x40, // 125
  0x80,0x00,0x40,0x00,0xC0,0x00,0x80,0x00,0x40, // 126
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 127
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 128
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 129
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 130
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 131
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 132
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 133
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 134
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 135
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 136
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 137
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 138
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 139
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 140
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 141
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 142
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 143
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 144
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 145
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 146
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 147
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 148
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 149
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 150
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 151
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 152
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 153
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 154
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 155
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 156
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 157
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 158
  0x00,0x00,0xFC,0x01,0xFC,0x01,  // 159
  0xD0,0x07,  // 161
  0xE0,0x00,0x18,0x03,0x10,0x01,0xA0, // 162
  0x00,0x00,0xF8,0x01,0x24,0x01,0x0C,0x01,  // 163
  0x00,0x00,0xF8,0x01,0x08,0x01,0x08,0x01,0x08,0x01,0xF8,0x01,  // 164
  0xCC,0x00,0xF0,0x01,0xF8,0x00,0xC4, // 165
  0xBC,0x03,  // 166
  0x00,0x00,0xFC,0x06,0x24,0x05,0xEC,0x07,  // 167
  0x00,0x00,0x04,0x00,0x04, // 168
  0x70,0x00,0xA8,0x00,0x54,0x01,0x54,0x01,0x54,0x01,0xD8,0x00,0x20, // 169
  0x00,0x00,0x34,0x00,0x3C, // 170
  0x40,0x00,0xE0,0x00,0xA0, // 171
  0x00,0x00,0x40,0x00,0x40,0x00,0xC0, // 172
  0x40,0x00,0x40, // 173
  0x70,0x00,0x88,0x00,0x74,0x01,0x34,0x01,0x54,0x01,0xD8,0x00,0x20, // 174
  0x00,0x00,0x08,0x00,0x08, // 175
  0x08,0x00,0x14,0x00,0x08, // 176
  0x20,0x00,0x78,0x01,0x20,0x01,0x20,0x01,  // 177
  0x28,0x00,0x3C,0x00,0x20, // 178
  0x24,0x00,0x2C,0x00,0x10, // 179
  0x00,0x00,0x06, // 180
  0xF0,0x07,0x00,0x01,0x00,0x01,0xF0,0x01,  // 181
  0x10,0x00,0x3C,0x00,0xFC,0x01,  // 182
  0x20, // 183
  0x00,0x04,0x00,0x02,  // 184
  0x00,0x00,0x3C, // 185
  0x00,0x00,0x3C,0x00,0x3C, // 186
  0xA0,0x00,0xE0,0x00,0x40, // 187
  0x00,0x00,0xFC,0x00,0x20,0x00,0xD8,0x00,0xE0,0x01,0x80, // 188
  0x00,0x00,0xFC,0x00,0x20,0x00,0x58,0x01,0xE0,0x01,0x00,0x01,  // 189
  0x28,0x00,0x2C,0x00,0xD0,0x00,0xC0,0x00,0xF8,0x01,0x80, // 190
  0x00,0x00,0xD0,0x07,0x00,0x06,  // 191
  0x00,0x01,0xF8,0x00,0x9D,0x00,0xE0,0x00,0x00,0x01,  // 192
  0x00,0x01,0xF8,0x00,0x9D,0x00,0xE0,0x00,0x00,0x01,  // 193
  0x00,0x01,0xF9,0x00,0x9C,0x00,0xE1,0x00,0x00,0x01,  // 194
  0x00,0x01,0xF9,0x00,0x9C,0x00,0xE1,0x00,0x00,0x01,  // 195
  0x00,0x01,0xFA,0x00,0x9C,0x00,0xE2,0x00,0x00,0x01,  // 196
  0x00,0x01,0xF8,0x00,0x9E,0x00,0xE0,0x00,0x00,0x01,  // 197
  0x00,0x01,0xE0,0x00,0x98,0x00,0xDC,0x00,0x24,0x01,0x24,0x01,0x04,0x01,  // 198
  0x00,0x00,0xFC,0x01,0x04,0x05,0x8C,0x03,0x90, // 199
  0x00,0x00,0xFC,0x01,0x25,0x01,0x24,0x01,  // 200
  0x00,0x00,0xFC,0x01,0x25,0x01,0x24,0x01,  // 201
  0x00,0x00,0xFD,0x01,0x24,0x01,0x25,0x01,  // 202
  0x00,0x00,0xFE,0x01,0x26,0x01,0x24,0x01,  // 203
  0xFC,0x01,0x01, // 204
  0x00,0x00,0xFD,0x01,  // 205
  0xFD,0x01,0x01, // 206
  0xFE,0x01,0x02, // 207
  0xF8,0x00,0x24,0x01,0x04,0x01,0x8C,0x01,0x70, // 208
  0x00,0x00,0xFD,0x01,0x30,0x00,0xC1,0x00,0xFC,0x01,  // 209
  0xF8,0x00,0x04,0x01,0x05,0x01,0x8C,0x01,0x70, // 210
  0xF8,0x00,0x04,0x01,0x05,0x01,0x8C,0x01,0x70, // 211
  0xF8,0x00,0x05,0x01,0x04,0x01,0x8D,0x01,0x70, // 212
  0xF8,0x00,0x05,0x01,0x04,0x01,0x8D,0x01,0x70, // 213
  0xF8,0x00,0x06,0x01,0x04,0x01,0x8E,0x01,0x70, // 214
  0x20,0x01,0xC0,0x00,0xC0,0x00,0x20,0x01,  // 215
  0x78,0x00,0xC4,0x01,0x34,0x01,0x8C,0x01,0x74, // 216
  0x00,0x00,0xFC,0x01,0x01,0x01,0xFC,0x01,  // 217
  0x00,0x00,0xFC,0x01,0x01,0x01,0xFC,0x01,  // 218
  0x00,0x00,0xFD,0x01,0x00,0x01,0xFD,0x01,  // 219
  0x00,0x00,0xFE,0x01,0x00,0x01,0xFE,0x01,  // 220
  0x0C,0x00,0x10,0x00,0xF1,0x01,0x0C,0x00,0x04, // 221
  0x00,0x00,0xFC,0x01,0x88,0x00,0xF8, // 222
  0x00,0x00,0xFC,0x01,0x3C,0x01,0xC0,0x01,  // 223
  0xA0,0x00,0x52,0x01,0xF4,0x01,0x00,0x01,  // 224
  0xA0,0x00,0x54,0x01,0xF2,0x01,0x00,0x01,  // 225
  0xA0,0x00,0x54,0x01,0xF2,0x01,0x04,0x01,  // 226
  0xA0,0x00,0x54,0x01,0xF2,0x01,0x06,0x01,  // 227
  0xA4,0x00,0x50,0x01,0xF4,0x01,0x00,0x01,  // 228
  0xA0,0x00,0x50,0x01,0xF6,0x01,0x00,0x01,  // 229
  0x00,0x00,0xD0,0x01,0x50,0x01,0xE0,0x00,0x50,0x01,0x70,0x01,  // 230
  0xE0,0x00,0x10,0x05,0x10,0x03,0xA0, // 231
  0xE0,0x00,0x52,0x01,0x54,0x01,0x60,0x01,  // 232
  0xE0,0x00,0x54,0x01,0x52,0x01,0x60,0x01,  // 233
  0xE4,0x00,0x52,0x01,0x54,0x01,0x60,0x01,  // 234
  0xE4,0x00,0x50,0x01,0x54,0x01,0x60,0x01,  // 235
  0xF4,0x01,  // 236
  0x00,0x00,0xF6,0x01,  // 237
  0xF6,0x01,0x04, // 238
  0xF4,0x01,0x04, // 239
  0x00,0x00,0xE4,0x01,0x2C,0x01,0xF4,0x01,  // 240
  0xF4,0x01,0x12,0x00,0x36,0x00,0xC0,0x01,  // 241
  0xE0,0x00,0x12,0x01,0x14,0x01,0xE0, // 242
  0xE0,0x00,0x14,0x01,0x12,0x01,0xE0, // 243
  0xE4,0x00,0x12,0x01,0x14,0x01,0xE0, // 244
  0xE4,0x00,0x12,0x01,0x16,0x01,0xE0, // 245
  0xE4,0x00,0x10,0x01,0x14,0x01,0xE0, // 246
  0x40,0x00,0x50,0x01,0x40,0x00,0x40, // 247
  0xE0,0x02,0xD0,0x01,0x30,0x01,0xE0, // 248
  0xF0,0x00,0x02,0x01,0x04,0x01,0xF0,0x01,  // 249
  0xF0,0x00,0x04,0x01,0x02,0x01,0xF0,0x01,  // 250
  0xF4,0x00,0x02,0x01,0x04,0x01,0xF0,0x01,  // 251
  0xF4,0x00,0x00,0x01,0x04,0x01,0xF0,0x01,  // 252
  0x30,0x00,0xC4,0x07,0xE2,0x00,0x10, // 253
  0xFC,0x07,0x10,0x01,0x10,0x01,0xE0, // 254
  0x34,0x00,0xC0,0x07,0xE4,0x00,0x10  // 255
};




// D2 -> SDA
// D1 -> SCL
// addess the ssd1306 oled on wemos d1
SSD1306Wire  display(0x3c, D2, D1);

// Screen Handling defines
// Network SSID
const char ssid[] = WIFI_SSID;
const char password[] = WIFI_PASSWD;

// ntp time information
const char* ntpServer = "pool.ntp.org";
const char *TZstr = "CET-1CEST-2,M3.5.0/02:00:00,M10.5.0/03:00:00 ";
timeval cbtime;
bool cbtime_set = false;  

typedef void (*Screen)(void);

int currentScreen = 0;
int counter = 1;

String nowString;

int currentPriceInTodaysIndex = -1;
Tibber tibberAPI;
Calculator calculator;

void time_is_set (void)
{
  time_t t = time (nullptr);

  gettimeofday (&cbtime, NULL);
  cbtime_set = true;
}

void initializeSerial() {
  Serial.begin(115200);
  Serial.println();
  Serial.println();
  delay(100);
}

void initializeDisplay() {
  // Initialising the UI will init the display too.
  display.init();

  display.flipScreenVertically();
  display.setFont(ArialMT_Plain_10);

  startupProgress(5);
}

void connectWifi() {
  WiFi.hostname("Price Requester A");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
  }

  startupProgress(8);
}

void printNow() {
  time_t now;
  struct tm * timeinfo;
  time(&now);
  timeinfo = localtime(&now);

  char timeStringBuff[50]; //50 chars should be enough
  strftime(timeStringBuff, sizeof(timeStringBuff), "%Y-%m-%dT%H:%M:%S", timeinfo);
  nowString = String(timeStringBuff);
  Serial.println(nowString);

}
void initializeClock() {
  settimeofday_cb (time_is_set);
  time_t rtc_time_t = 946684800; 
  timeval tv = { rtc_time_t, 0 }; 
  settimeofday (&tv, NULL);
  configTime (TZstr, ntpServer);
}

void setup() {

  pinMode(D8, INPUT);
  
  initializeSerial();
  Serial.println("Serial Up");
  initializeDisplay();
  Serial.println("Display Up");
  initializeClock();
  Serial.println("Clock Up");
  connectWifi();  
  Serial.println("Wifi Up");

  startupProgress(10);
  
  tibberAPI.initialize();
  Serial.println("Tibber Up");
  
  startupProgress(20);
  
  tibberAPI.read();
  
  startupProgress(100);
}

void displayError(String message) {
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 0, "Error: ");
  display.drawString(0, 10, message);
}

void displayMessage(String message) {
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 0, "Info: ");
  display.drawString(0, 10, message);
}

void startupProgress(int progress) {
  display.clear();
  // draw the progress bar
  display.drawProgressBar(0, 32, 120, 10, progress);

  // draw the percentage as String
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.drawString(64, 15, String(progress) + "%");
  display.display();
}

void drawInfo() {
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 0, "Verbunden: " + String(WiFi.status() == WL_CONNECTED ? "Ja" : "Nein"));
  display.drawString(0, 12, "IP: " + WiFi.localIP().toString());
  display.drawString(0, 32, "Stand: 09.12.22 - 10:35" );
}

void drawCurrentPrice() {

  double highestPrice = tibberAPI.lastResponse().tomorrowHighestPrice > tibberAPI.lastResponse().todayHighestPrice ?
                            tibberAPI.lastResponse().tomorrowHighestPrice 
                          : tibberAPI.lastResponse().todayHighestPrice;
                          
  String highestAt = tibberAPI.lastResponse().tomorrowHighestPrice > tibberAPI.lastResponse().todayHighestPrice ?
                            tibberAPI.lastResponse().tomorrowHighestPriceStartsAt
                          : tibberAPI.lastResponse().todayHighestPriceStartsAt;         
                          
  drawPrice("Aktueller Preis: ",
            tibberAPI.lastResponse().current.price, 
            "Höchster: " + String(highestPrice) + "Um:" + calculator.isoDateTimeStringToClock(highestAt));
}


void drawProfileCost(String title, const std::vector<double>& profile, int timerAdjustHours) {
  auto cost = calculator.allPricesForProfile(tibberAPI.lastResponse(), profile);
  sort(cost.begin(), cost.end(), &sortByIndex);
  auto now = cost.front();

  //drop the first entries if the timer sets the "done time -> negative adjustment value", those are not reachable be the timer anymore.
  
  cost.erase(cost.begin(), cost.begin() + std::max(0, std::abs(timerAdjustHours) - 1));
  
  sort(cost.begin(), cost.end(), &sortByLowestPrice);

  auto front = cost.front();

  drawActionCost( title,
            "Jetzt: " + String(now.priceOfAction) + "EUR",
            "+" + String(front.originalIndex) + "  " + String(front.priceOfAction) + "EUR",
            "+" + String(cost.back().originalIndex) + "  " + String(cost.back().priceOfAction)  + "EUR");
}

void drawWashing60Cost() {
  drawProfileCost("Waschmaschine 60", ConsumptionProfile::washingMachine_60deg, ConsumptionProfile::washingMachine_60deg_TimerAdjustment);
}

void drawWashing60Diagram() {
  drawPriceDiagram("Waschmaschine 60", ConsumptionProfile::washingMachine_60deg, ConsumptionProfile::washingMachine_60deg_TimerAdjustment);
}

void drawDryerClosetDryCost() {
  drawProfileCost("Trockner Schranktrocken", ConsumptionProfile::dryer_closetDry, ConsumptionProfile::dryer_closetDry_TimerAdjustment);
}

void drawDryerClosetDryDiagram() {
  drawPriceDiagram("Trockner Schranktrocken", ConsumptionProfile::dryer_closetDry, ConsumptionProfile::dryer_closetDry_TimerAdjustment);
}

void drawWashing40Cost() {
  drawProfileCost("Waschmaschine 40", ConsumptionProfile::washingMachine_40deg, ConsumptionProfile::washingMachine_40deg_TimerAdjustment);
}
void drawWashing40Diagram() {
  drawPriceDiagram("Waschmaschine 40", ConsumptionProfile::washingMachine_40deg, ConsumptionProfile::washingMachine_40deg_TimerAdjustment);
}

void drawPrice(String startsAt, double price, String meta) {
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 0, startsAt);
  display.setFont(ArialMT_Plain_24);
  display.drawString(0, 12, String(price));
  display.setFont(ArialMT_Plain_10);
  display.drawString(50, 25, "Euro | 1kWh");
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 45, meta);
}

void drawActionCost(String title, String now, String low, String high) {
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 0, title);
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 12, now);
  display.setFont(ArialMT_Plain_16);
  display.drawString(0, 26, low);
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 45, high);
}

void drawPriceDiagram(String title, const std::vector<double>& profile, int timerAdjustMinutes) {
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setFont(ArialMT_Plain_10);
  display.drawString(0, 0, title);
  display.setFont(Roboto_Condensed_Light_9);
  auto allPrices = calculator.allPricesForProfile(tibberAPI.lastResponse(), ConsumptionProfile::washingMachine_60deg);
  sort(allPrices.begin(), allPrices.end(), &sortByIndex);

  int widthMulti = 2 ;
  
  int diagramTopMargin = 24;
  int diagramBottomMargin = 24;
  int displayHeight = display.getHeight()-1;

  int startX = 20 + (48 - allPrices.size());
  int startY = displayHeight - (int) 100 * allPrices.at(0).priceOfAction + diagramTopMargin - diagramBottomMargin;
  
  display.drawLine(20,
                   startY,
                   startX,
                   startY);

  // draw a x for NOW
  display.drawLine(startX - 2,
                   startY + 2,
                   startX + 2,
                   startY - 2);
                   
  display.drawLine(startX - 2,
                   startY - 2,
                   startX + 2,
                   startY + 2);
                   
  for (int i = 0; i < allPrices.size() -1; ++i) {
    const auto& a = allPrices.at(i);
    const auto& b = allPrices.at(i + 1);

    int aX = startX + a.originalIndex + i * widthMulti;
    int aY = displayHeight - (int) 100 * a.priceOfAction + diagramTopMargin - diagramBottomMargin;

    int bX = startX + b.originalIndex + (i+1) * widthMulti;
    int bY = displayHeight - (int) 100 * b.priceOfAction + diagramTopMargin  - diagramBottomMargin;
    
    if (a.time == "12:00" || a.time == "00:00") {
      display.drawString(aX - 10, 14, a.time);
      display.drawLine(aX, diagramTopMargin, aX, displayHeight - 9); 
    }

    if (i % (allPrices.size()/3) == 0) {
      if (aX -2 > 12) {
        display.drawString(aX - 2, displayHeight - 8, "+" + String(a.originalIndex));
      }
    }
    display.drawLine(aX, aY, bX, bY);  
  }

  sort(allPrices.begin(), allPrices.end(), &sortByLowestPrice);

  display.drawString(1, 14, String(allPrices.back().priceOfAction));
  display.drawString(1, displayHeight - 8, String(allPrices.front().priceOfAction));
}

Screen screens[] = {
  // drawInfo,
  drawCurrentPrice,
  drawWashing40Cost,
  drawWashing40Diagram,
  drawWashing60Cost,
  drawWashing60Diagram,
  drawDryerClosetDryCost,
  drawDryerClosetDryDiagram
}; 

int screenCount = (sizeof(screens) / sizeof(Screen));
bool keyPress = false;
long timeSincePress = 0;

void loop() {  
  if(!cbtime_set)    // don't do anything until NTP has set time
    return;

  int screenSwitch = digitalRead(D8); 
  if (screenSwitch == HIGH) { 
    if (!keyPress) {
      timeSincePress = millis();
    }
    
    keyPress = true;
    
    if (millis() - timeSincePress > 2000) {
      display.displayOff();
      ESP.deepSleep(0);
   }
  }
  
  if (screenSwitch == LOW && keyPress ) {
    currentScreen = (currentScreen + 1) % screenCount;
    keyPress = false;
    timeSincePress = 0;
  }
  
  // clear the display
  display.clear();
  screens[currentScreen]();

  display.setTextAlignment(TEXT_ALIGN_RIGHT);
  display.drawString(10, 128, String(millis()));
  // write the buffer to the display
  display.display();
  
  delay(10);

}
